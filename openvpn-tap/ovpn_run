#!/bin/bash

#
# Run the OpenVPN server normally
#
# Determine which iptables command to use
export IPTABLES_CMD=iptables
if [ "$NFT_TABLES" == 1 ]; then
  IPTABLES_CMD=iptables-nft
fi

if [ "$DEBUG" == "1" ]; then
  set -x
fi

set -e

cd $OPENVPN

# Build runtime arguments array based on environment
USER_ARGS=("${@}")
ARGS=()

# Checks if ARGS already contains the given value
function hasArg {
    local element
    for element in "${@:2}"; do
        [ "${element}" == "${1}" ] && return 0
    done
    return 1
}

# Adds the given argument if it's not already specified.
function addArg {
    local arg="${1}"
    [ $# -ge 1 ] && local val="${2}"
    if ! hasArg "${arg}" "${USER_ARGS[@]}"; then
        ARGS+=("${arg}")
        [ $# -ge 1 ] && ARGS+=("${val}")
    fi
}

# set up iptables rules and routing
# this allows rules/routing to be altered by supplying this function
# in an included file, such as ovpn_env.sh
function setupIptablesAndRouting {
    $IPTABLES_CMD -t nat -C POSTROUTING -s $OVPN_SERVER -o $OVPN_NATDEVICE -j MASQUERADE 2>/dev/null || {
      $IPTABLES_CMD -t nat -A POSTROUTING -s $OVPN_SERVER -o $OVPN_NATDEVICE -j MASQUERADE
    }
    for i in "${OVPN_ROUTES[@]}"; do
        $IPTABLES_CMD -t nat -C POSTROUTING -s "$i" -o $OVPN_NATDEVICE -j MASQUERADE 2>/dev/null || {
          $IPTABLES_CMD -t nat -A POSTROUTING -s "$i" -o $OVPN_NATDEVICE -j MASQUERADE
        }
    done
}

addArg "--config" "$OPENVPN/openvpn.conf"

source "$OPENVPN/ovpn_env.sh"

mkdir -p /dev/net
if [ ! -c /dev/net/tun ]; then
    mknod /dev/net/tun c 10 200
fi

if [ $OVPN_DEVICE == "tap" ]; then
    if [ $(ip link show | grep -c $OVPN_DEVICE$OVPN_DEVICEN:) -eq 0 ]; then
            openvpn --mktun --dev $OVPN_DEVICE$OVPN_DEVICEN
    fi
    
    ip link set $OVPN_DEVICE$OVPN_DEVICEN up
    echo 'Setting up bridge'
    # check if bridge already exists; create if not
    if [ $(ip link show | grep -c $OVPN_BR_BR:) -eq 0 ]; then
        brctl addbr $OVPN_BR_BR
    fi
    
    # check if $OVPN_BR_ETH_IF is already added to bridge; add if not
    if [ $(brctl show $OVPN_BR_BR | grep -c $OVPN_BR_ETH_IF) -eq 0 ]; then
        brctl addif $OVPN_BR_BR $OVPN_BR_ETH_IF
    fi
    
    # check if openvpn device is already added to bridge; add if not
    if [ $(brctl show $OVPN_BR_BR | grep -c $OVPN_DEVICE$OVPN_DEVICEN) -eq 0 ]; then
        brctl addif $OVPN_BR_BR $OVPN_DEVICE$OVPN_DEVICEN
    fi
    
    echo 'setting tap device to promiscous mode'
    ifconfig $OVPN_DEVICE$OVPN_DEVICEN 0.0.0.0 promisc up
    echo 'setting eth device to promiscous mode'
    ifconfig $OVPN_BR_ETH_IF 0.0.0.0 promisc up
    echo 'setting IP, subnet and broadcast address for bridge'
    ifconfig $OVPN_BR_BR $OVPN_BR_ETH_IP netmask $OVPN_BR_ETH_SUBNET broadcast $OVPN_BR_ETH_BROADCAST
    
    # Add default route if eth is also gateway port
    echo 'setting mac address for bridge'
    ip link set $OVPN_BR_BR address $OVPN_BR_ETH_MAC
    
    echo 'checking if default gateway needs to be added for bridge'
    #if [ $(route | grep -c -Eo "^default\s+$OVPN_BR_ETH_GATEWAY.+$OVPN_BR_BR$") -eq 0 ]; then
    #    route add default gw $OVPN_BR_ETH_GATEWAY $OVPN_BR_BR
    #fi
    
    echo 'setting up IPTABLES'
    # check if entry already exists before adding
    if [ $($IPTABLES_CMD -S | grep -c -- "-A INPUT -i $OVPN_DEVICE$OVPN_DEVICEN -j ACCEPT") -eq 0 ]; then
       
       $IPTABLES_CMD -A INPUT -i $OVPN_DEVICE$OVPN_DEVICEN -j ACCEPT
    fi
    if [ $($IPTABLES_CMD -S | grep -c -- "-A INPUT -i $OVPN_BR_BR -j ACCEPT") -eq 0 ]; then
        $IPTABLES_CMD -A INPUT -i $OVPN_BR_BR -j ACCEPT
    fi
    if [ $($IPTABLES_CMD -S | grep -c -- "-A FORWARD -i $OVPN_BR_BR -j ACCEPT") -eq 0 ]; then
        $IPTABLES_CMD -A FORWARD -i $OVPN_BR_BR -j ACCEPT
    fi
fi

if [ -d "$OPENVPN/ccd" ]; then
    addArg "--client-config-dir" "$OPENVPN/ccd"
fi

# When using --net=host, use this to specify nat device.
[ -z "$OVPN_NATDEVICE" ] && OVPN_NATDEVICE=eth0

# Setup NAT forwarding if requested
if [ "$OVPN_DEFROUTE" != "0" ] || [ "$OVPN_NAT" == "1" ] ; then
    # call function to setup iptables rules and routing
    # this allows rules to be customized by supplying
    # a replacement function in, for example, ovpn_env.sh
    setupIptablesAndRouting
fi

# Use a copy of crl.pem as the CRL Needs to be readable by the user/group
# OpenVPN is running as.  Only pass arguments to OpenVPN if it's found.
if [ "$EASYRSA_PKI/crl.pem" -nt "$OPENVPN/crl.pem" ]; then
    cp -f "$EASYRSA_PKI/crl.pem" "$OPENVPN/crl.pem"
    chmod 644 "$OPENVPN/crl.pem"
fi

if [ -r "$OPENVPN/crl.pem" ]; then
    addArg "--crl-verify" "$OPENVPN/crl.pem"
fi

ip -6 route show default 2>/dev/null
if [ $? = 0 ]; then
    echo "Checking IPv6 Forwarding"
    if [ "$(</proc/sys/net/ipv6/conf/all/disable_ipv6)" != "0" ]; then
        echo "Sysctl error for disable_ipv6, please run docker with '--sysctl net.ipv6.conf.all.disable_ipv6=0'"
    fi

    if [ "$(</proc/sys/net/ipv6/conf/default/forwarding)" != "1" ]; then
        echo "Sysctl error for default forwarding, please run docker with '--sysctl net.ipv6.conf.default.forwarding=1'"
    fi

    if [ "$(</proc/sys/net/ipv6/conf/all/forwarding)" != "1" ]; then
        echo "Sysctl error for all forwarding, please run docker with '--sysctl net.ipv6.conf.all.forwarding=1'"
    fi
fi


echo "Running 'openvpn ${ARGS[@]} ${USER_ARGS[@]}'"
exec openvpn ${ARGS[@]} ${USER_ARGS[@]}
